import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { PaginateModel, HydratedDocument, Types } from 'mongoose';
import * as mongooseLeanVirtuals from 'mongoose-lean-virtuals';
import * as mongoosePaginate from 'mongoose-paginate-v2';
import { ProductCategory, ProductMeasuringScale } from 'src/modules/product/product.schema';

export enum OrderStatus {
  PENDING='pending',
  PREPARING='preparing',
  AWAITING_COURIER='awaitingCourier',
  DELIVERING='delivering',
  DELIVERED='delivered',
  CANCELLED='cancelled',
  DECLINED='declined',
  FAILED='failed',
}

export const ORDER_STATUS_DISPLAY_MAP: Record<string, string> = {
  [OrderStatus.PENDING]: 'üïí –ù–æ–≤—ã–π',
  [OrderStatus.PREPARING]: 'üçè –ì–æ—Ç–æ–≤–∏—Ç—Å—è',
  [OrderStatus.AWAITING_COURIER]: 'üöö –û–∂–∏–¥–∞–µ—Ç –∫—É—Ä—å–µ—Ä–∞',
  [OrderStatus.DELIVERING]: 'üöö –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è',
  [OrderStatus.DELIVERED]: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω',
  [OrderStatus.CANCELLED]: '‚ùå –û—Ç–º–µ–Ω—ë–Ω',
  [OrderStatus.DECLINED]: '‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω',
  [OrderStatus.FAILED]: '‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å',
};


export enum PositiveFeedbackTag {
  GOOD_QUALITY = 'goodQuality',
  FRESH_PRODUCTS = 'freshProducts',
  FAST_DELIVERY = 'fastDelivery',
  GOOD_COMMUNICATION = 'goodCommunication',
  GOOD_PRICE = 'goodPrice'
}

export enum NegativeFeedbackTag {
  DELAYED_DELIVERY = 'delayedDelivery', 
  LOW_QUALITY = 'lowQuality',
  DAMAGED_PACKAGING = 'damagedPackaging',
  WRONG_ITEMS = 'wrongItems',
  HIGH_PRICE = 'highPrice'
}

export enum OrderDeclineReason {
  OUT_OF_STOCK = 'outOfStock',             // –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ
  CLOSED_SHOP = 'closedShop',              // –ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç (–≤–Ω–µ–ø–ª–∞–Ω–æ–≤–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ)
  PRICE_CHANGED = 'priceChanged',          // –ò–∑–º–µ–Ω–∏–ª–∏—Å—å —Ü–µ–Ω—ã
  QUALITY_ISSUES = 'qualityIssues',        // –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–∞
  INSUFFICIENT_QUANTITY = 'insufficientQuantity', // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
  TECHNICAL_ISSUES = 'technicalIssues',    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
  WRONG_PRICE = 'wrongPrice',              // –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ
  TEMPORARILY_UNAVAILABLE = 'temporarilyUnavailable', // –¢–æ–≤–∞—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  OTHER = 'other'                          // –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
}

export enum OrderCancelReason {
  CHANGED_MIND = 'changedMind',             // –ü–µ—Ä–µ–¥—É–º–∞–ª
  DUPLICATE_ORDER = 'duplicateOrder',       // –î—É–±–ª–∏—Ä—É—é—â–∏–π –∑–∞–∫–∞–∑
  LONG_DELIVERY_TIME = 'longDeliveryTime',  // –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
  DELIVERY_ISSUES = 'deliveryIssues',       // –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
  PAYMENT_ISSUES = 'paymentIssues',         // –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π
  PRICE_TOO_HIGH = 'priceTooHigh',          // –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–∞
  FOUND_BETTER_OFFER = 'foundBetterOffer',  // –ù–∞—à–µ–ª –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
  UNAVAILABLE_DELIVERY_TIME = 'unavailableDeliveryTime', // –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏
  ORDERED_BY_MISTAKE = 'orderedByMistake',  // –û—à–∏–±–æ—á–Ω—ã–π –∑–∞–∫–∞–∑
  SELECTED_WRONG_ITEMS = 'selectedWrongItems', // –í—ã–±—Ä–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
  OTHER = 'other'                           // –î—Ä—É–≥–∞—è –ø—Ä–∏—á–∏–Ω–∞ (—Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è)
}

// orderedBy (customer)
const OrderedBySchema = {
  _id: false,
  customer: { type: Types.ObjectId, ref: 'Customer', required: true },
  customerName: { type: String, required: true },
};
export interface OrderedBy {
  customer: Types.ObjectId;
  customerName: string;
}

// orderedFrom (shop)
const OrderedFromSchema = {
  _id: false,
  shop: { type: Types.ObjectId, ref: 'Shop', required: true },
  shopName: { type: String, required: true },
  shopImage: { type: String, required: true },
};
export interface OrderedFrom {
  shop: Types.ObjectId;
  shopName: string;
  shopImage: string;
}

// HandledBy (employee)
const HandledBySchema = {
  _id: false,
  employee: { type: Types.ObjectId, ref: 'Employee', required: false, default: null },
  employeeName: { type: String, required: false, default: null },
  shift: { type: Types.ObjectId, ref: 'Shift', required: false, default: null },
};
export interface HandledBy {
  employee: Types.ObjectId | null;
  employeeName: string | null;
  shift: Types.ObjectId | null;
}


// finance
const OrderFinancesSchema = {
  totalCartSum: { type: Number, required: true, default: 0, min: 0 },
  sentSum: { type: Number, required: true, default: 0, min: 0 },
  deliveryPrice: { type: Number, required: true, default: 0, min: 0 },
  systemTax: { type: Number, required: true, default: 0, min: 0 },
  usedBonusPoints: { type: Number, required: false, default: 0 },
  totalWeightCompensationBonus: { type: Number, required: false, default: 0 },
  totalSum: { type: Number, required: true, default: 0, min: 0 },
  _id: false
};
export interface OrderFinances {
  totalCartSum: number;
  sentSum: number;
  deliveryPrice: number;
  systemTax: number;
  usedBonusPoints: number;
  totalWeightCompensationBonus: number;
  totalSum: number;
};

// rating
const OrderRatingSchema = {
  settedRating: { type: Number, default: 0, min: 0, max: 5 },
  feedbackAt: { type: Date, default: null },
  feedbackTags: [{ type: String, enum: [...Object.values(PositiveFeedbackTag), ...Object.values(NegativeFeedbackTag)], default: [] }],
  feedbackComment: { type: String, default: '' },
  _id: false
};
export interface OrderRating {
  settedRating: number;
  feedbackAt: Date | null;
  feedbackTags: (PositiveFeedbackTag | NegativeFeedbackTag)[];
  feedbackComment: string;
}

// delivery
const OrderDeliverySchema = {
  deliveryAddress: { type: String, required: true, default: '' },
  deliveryPrice: { type: Number, required: true, min: 0, default: 0 },
  deliveryTime: { type: Number, required: true, min: 0, default: 0 },
  _id: false
};
export interface OrderDelivery {
  deliveryAddress: string;
  deliveryPrice: number;
  deliveryTime: number;
}

// order product
const OrderProductSchema = {
  shopProduct: { type: Types.ObjectId, ref: 'ShopProduct', required: true },
  category: { type: String, enum: Object.values(ProductCategory), required: true },
  productName: { type: String, required: true },
  price: { type: Number, required: true, min: 0 },
  cardImage: { type: Types.ObjectId, ref: 'UploadedFile', required: false },
  measuringScale: { type: String, enum: Object.values(ProductMeasuringScale), required: true },
  selectedQuantity: { type: Number, required: true, min: 0 },
  actualQuantity: { type: Number, min: 0, required: false, default: null },
  weightCompensationBonus: { type: Number, min: 0, required: false, default: 0 },
  _id: false
};
export interface OrderProduct {
  shopProduct: Types.ObjectId;
  category: ProductCategory;
  productName: string;
  price: number;
  cardImage: Types.ObjectId | null;
  measuringScale: ProductMeasuringScale;
  selectedQuantity: number;
  actualQuantity: number | null;
  weightCompensationBonus: number;
}

@Schema({
  toJSON: { virtuals: true },
  toObject: { virtuals: true },
  timestamps: true,
  id: false,
})
export class Order {

  _id: Types.ObjectId;
  // virtuals (TS-–æ–±—ä—è–≤–ª–µ–Ω–∏—è)
  readonly orderId?: string;

  @Prop({ type: OrderedFromSchema, required: true })
  orderedFrom: OrderedFrom;

  @Prop({ type: OrderedBySchema, required: true })
  orderedBy: OrderedBy;

  @Prop({ type: String, enum: Object.values(OrderStatus), required: true, default: OrderStatus.PENDING })
  orderStatus: OrderStatus;

  @Prop({ type: Types.ObjectId, ref: 'Shift', required: true })
  shift: Types.ObjectId;

  @Prop({ type: Date, required: true })
  orderedAt: Date;

  @Prop({ type: Date, required: false, default: null })
  acceptedAt: Date | null;

  @Prop({ type: Date, required: false, default: null })
  assembledAt: Date | null;

  @Prop({ type: Date, required: false, default: null })
  courierCalledAt: Date | null;

  @Prop({ type: Date, required: false, default: null })
  handedToCourierAt: Date | null;

  @Prop({ type: Date, required: false, default: null })
  deliveredAt: Date | null;

  @Prop({ type: Date, required: false, default: null })
  canceledAt: Date | null;

  @Prop({ type: String, enum: OrderCancelReason, required: false, default: null })
  canceledReason: OrderCancelReason | null;

  @Prop({ type: String, required: false, default: null })
  canceledComment: string | null;

  @Prop({ type: Date, required: false, default: null })
  declinedAt: Date | null;

  @Prop({ type: String, enum: OrderDeclineReason, required: false, default: null })
  declinedReason: OrderDeclineReason | null;

  @Prop({ type: String, required: false, default: null })
  declinedComment: string | null;

  @Prop({ type: String, required: false, default: null })
  customerComment: string | null;

  @Prop({ type: HandledBySchema, required: false, default: null })
  handledBy: HandledBy | null;

  // delivery
  @Prop({ required: true, type: OrderDeliverySchema })
  delivery: OrderDelivery;

  // finances
  @Prop({  type: OrderFinancesSchema, required: true })
  finances: OrderFinances;

  // rating
  @Prop({ required: false, type: OrderRatingSchema })
  rating: OrderRating;

  // products
  @Prop({ type: [OrderProductSchema], required: true, default: [] })
  products: OrderProduct[]

};


export const OrderSchema = SchemaFactory.createForClass(Order);
OrderSchema.plugin(mongooseLeanVirtuals as any);
OrderSchema.plugin(mongoosePaginate);

OrderSchema.virtual('orderId').get(function (this: Order): string {
  return this._id.toString();
});

export type OrderDocument = HydratedDocument<Order>;
export type OrderModel = PaginateModel<OrderDocument>;
