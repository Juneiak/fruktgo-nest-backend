import { Injectable, OnModuleInit, BadRequestException, Inject, forwardRef } from '@nestjs/common';
import { Telegraf, Markup, Context } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { Request, Response } from 'express';
import { EmployeeAuthService } from 'src/modules/auth/employee-auth/employee-auth.service';
import { RegisterEmployeeDto } from 'src/modules/auth/employee-auth/employee-auth.dtos';
import { INestApplication } from '@nestjs/common';
import { message } from 'telegraf/filters';
import { EmployeeForEmployeeService } from 'src/modules/employee/for-employee/employee-for-employee.service';
import { formatEmployeeInfoMessage, formatEmployeeAvatar, formatNewOrderMessage } from './utils';
import { EmployeeForEmployeeTelegramBotResponseDto } from 'src/modules/employee/for-employee/employee-for-employee.dtos';
import { EMPLOYEE_BOT_LOGIN_TO_SHOP_PREFIX } from 'src/common/constants';
import { TelegramNotificationResponseDto } from 'src/common/dtos';
import { Order } from 'src/modules/order/order.schema';
import {RequestToEmployeeStatus} from 'src/modules/employee/schemas/request-to-employee.schema'
import {EmployeeLoginCode} from 'src/modules/auth/employee-auth/employee-login-code.schema'
import { setupWebhook } from "../telegram-utils"

enum MENU_BUTTONS {
  main = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
  edit = 'üîß –ò–∑–º–µ–Ω–∏—Ç—å',
  leaveTheSeller = '‚ùå –û—Ç–∫—Ä–µ–ø–∏—Ç—Å—è –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏',
  leaveConfirm = '‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ',
  help = '‚ÑπÔ∏è –ü–æ–º–æ—â—å',
  loginToShop = 'üè™ –í–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω',
  profile = 'üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ',
  register = 'üì≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
  requests = '–ó–∞–ø—Ä–æ—Å—ã',
  acceptRequest = '‚úÖ –ü—Ä–∏–Ω—è—Ç—å',
  rejectRequest = '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',

  loginToShopAccept = '‚úÖ –í–æ–π—Ç–∏',
  loginToShopReject = '‚ùå –≠—Ç–æ –Ω–µ —è',
};

enum EDIT_BUTTONS {
  name = '–ò–º—è',
  avatar = '–ê–≤–∞—Ç–∞—Ä'
}

interface EmployeeContext extends Context {
  state: {
    employee?: EmployeeForEmployeeTelegramBotResponseDto | null;
  };
}


@Injectable()
export class TelegramEmployeeBotService implements OnModuleInit {
  private bot: Telegraf;

  // Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  private awaitingEmployeeLoginToShopCode: Map<number, boolean> = new Map();
  private awaitingEmployeeEditName: Map<number, boolean> = new Map();
  private awaitingEmployeeEditAvatar: Map<number, boolean> = new Map();
  private awaitingChoosingEmployeeRequestId: Map<number, boolean> = new Map();
  private awaitingRequestChangeStatus: Map<number, {requestId: string}> = new Map();

  private awaitingEmployeeAnswerToLoginToShop: Map<number, EmployeeLoginCode> = new Map();

  private async clearMaps() {
    this.awaitingEmployeeLoginToShopCode.clear();
    this.awaitingEmployeeEditName.clear();
    this.awaitingEmployeeEditAvatar.clear();
    this.awaitingChoosingEmployeeRequestId.clear();
    this.awaitingRequestChangeStatus.clear();

    this.awaitingEmployeeAnswerToLoginToShop.clear();
  }
  constructor(
    private readonly configService: ConfigService,
    @Inject(forwardRef(() => EmployeeAuthService))
    private readonly employeeAuthService: EmployeeAuthService,
    private readonly employeeForEmployeeService: EmployeeForEmployeeService
  ) {
    const token = this.configService.get<string>('EMPLOYEE_BOT_TOKEN');
    if (!token) throw new Error('EMPLOYEE_BOT_TOKEN not provided');
    this.bot = new Telegraf(token);
  }

  async onModuleInit() {
    this.setupBot();
  }



  public async setApp(app: INestApplication) {
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegraf webhook –≤ express NestJS
    app.use('/employee-bot', (req: Request, res: Response, next) => {
      
      if (req.method === 'POST') {
        if (req.body && req.body.update_id) {
          this.bot.handleUpdate(req.body, res);
        } else {
          res.status(400).send('Invalid Telegram update');
        }
      } else {
        res.status(200).send('Employee bot webhook');
      }
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    setupWebhook(this.bot, this.configService, 'Employee', '/employee-bot');
  }

  private setupBot() {
    // –æ–±—â–µ–µ
    this.bot.start(async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.handleStart(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.main, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        this.clearMaps();
        await this.getMainMenu(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.help, (ctx) => {
      ctx.reply('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ "üì≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
    });



    // —Ä–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è–º–∏
    this.bot.hears(MENU_BUTTONS.register, async (ctx) => {
      await this.handleContactRequest(ctx);
    });
    this.bot.on(message('contact'), async (ctx) => {
      await this.handleEmployeeRegister(ctx);
    });
    this.bot.hears(MENU_BUTTONS.loginToShop, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.askEmployeeLoginToShop(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.loginToShopAccept, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.handleAcceptLoginToShop(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.loginToShopReject, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.handleRejectLoginToShop(ctx);
      });
    });



    // —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
    this.bot.hears(MENU_BUTTONS.requests, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.getRequests(ctx);
      });
    });
    this.bot.hears(/^üìç (.+)#(.+)$/, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        const requestId = (ctx.message as any).text.match(/^üìç (.+)#(.+)$/)[2];
        await this.chooseRequest(ctx, requestId);
      });
    });
    this.bot.hears(MENU_BUTTONS.acceptRequest, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.changeRequestStatus(ctx, RequestToEmployeeStatus.ACCEPTED);
      });
    });
    this.bot.hears(MENU_BUTTONS.rejectRequest, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.changeRequestStatus(ctx, RequestToEmployeeStatus.REJECTED);
      });
    });

    

    // —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    this.bot.hears(MENU_BUTTONS.profile, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.getEmployeeInfo(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.edit, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.getEditMenu(ctx);
      });
    });
    this.bot.hears(EDIT_BUTTONS.name, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.askEditName(ctx);
      });
    });
    this.bot.hears(EDIT_BUTTONS.avatar, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.askEditAvatar(ctx);
      });
    });



    // —Ä–∞–±–æ—Ç–∞ —Å –æ—Ç–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏
    this.bot.hears(MENU_BUTTONS.leaveTheSeller, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.getLeaveTheSellerMenu(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.leaveConfirm, async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        await this.confirmLeaveTheSeller(ctx);
      });
    });



    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    this.bot.on(message('text'), async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        const telegramId = ctx.state.employee!.telegramId;
        // —Ä–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        if (this.awaitingEmployeeLoginToShopCode.get(telegramId)) {
          const code = (ctx.message as any).text;
          await this.handleLoginToShop(ctx, code);
          return;
        }
      
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
        if (this.awaitingEmployeeEditName.get(telegramId)) {
          const name = (ctx.message as any).text;
          await this.handleEditName(ctx, name);
          return;
        }

        await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
      });
    });

    // —Ä–∞–±–æ—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º
    this.bot.on('photo', async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        const telegramId = ctx.state.employee!.telegramId;        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
        if (this.awaitingEmployeeEditAvatar.get(telegramId)) {
          if (ctx.message && 'photo' in ctx.message) {
            // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Ñ–æ—Ç–æ –∏–∑ –º–∞—Å—Å–∏–≤–∞ - –æ–Ω–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
            const photoArray = ctx.message.photo;
            const biggestPhoto = photoArray[photoArray.length - 1];
            const fileId = biggestPhoto.file_id;
            await this.handleEditAvatar(ctx, fileId);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            this.awaitingEmployeeEditAvatar.delete(telegramId);
          } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è');
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
          }
          return;
        } else console.log('–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ, –Ω–æ –Ω–µ –æ–∂–∏–¥–∞–ª–æ—Å—å –∞–≤–∞—Ç–∞—Ä–∞.');
      });
    });
    this.bot.on('document', async (ctx) => {
      await this.checkEmployeeExists(ctx, async (ctx: EmployeeContext) => {
        const telegramId = ctx.state.employee!.telegramId;        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∞
        if (this.awaitingEmployeeEditAvatar.get(telegramId)) {
          if (ctx.message && 'document' in ctx.message) {
            const doc = ctx.message.document;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if (doc.mime_type && doc.mime_type.startsWith('image/')) {
              const fileId = doc.file_id;
              await this.handleEditAvatar(ctx, fileId);
              
              // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
              this.awaitingEmployeeEditAvatar.delete(telegramId);
            } else {
              await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–∞.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
            }
          } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è');
            await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
          }
        }
      });
    });

  }


  
  // ====================================================
  // PRIVATE METHODS
  // ====================================================

  // –æ–±—â–µ–µ
  private async handleStart(ctx: EmployeeContext) {
    if (!ctx.message || typeof (ctx.message as any).text !== 'string') return await this.getMainMenu(ctx);
    
    const messageText = (ctx.message as any).text;
    const [command, payload] = messageText.split(' ');

    if (payload) {
      const [action, param] = payload.split('_');
      if (action === EMPLOYEE_BOT_LOGIN_TO_SHOP_PREFIX && param) {
        await this.handleLoginToShop(ctx, param);
        return;
      }
      await ctx.reply(`–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload: ${payload}`, Markup.keyboard([[MENU_BUTTONS.main]]).resize());
      return;
    }
    
    await this.getMainMenu(ctx);
  }
  private async getMainMenu(ctx: Context) {
    this.clearMaps();
    return await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.keyboard([
        [MENU_BUTTONS.loginToShop],
        [MENU_BUTTONS.profile],
        [MENU_BUTTONS.help],
        [MENU_BUTTONS.requests],
      ])
        .resize()
        .oneTime(false)
    );
  }
  private async checkEmployeeExists(ctx: Context, next: (ctx: EmployeeContext) => Promise<void>) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

    const employee = await this.employeeForEmployeeService.getEmployeeByTelegramId(telegramId);
    if (!employee) {
      await ctx.reply(
        '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –º–µ–Ω—é.',
        Markup.keyboard([
          [MENU_BUTTONS.register],
          [MENU_BUTTONS.help],
        ]).resize().oneTime(false)
      );
      return;
    }
    // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å employee –≤ ctx.state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    (ctx.state as any).employee = employee;
    await next(ctx as EmployeeContext);
  }



  // –≤—Ö–æ–¥ –≤ –º–∞–≥–∞–∑–∏–Ω
  private async askEmployeeLoginToShop(ctx: EmployeeContext) {
    const telegramId = ctx.state.employee!.telegramId;
    this.awaitingEmployeeLoginToShopCode.set(telegramId, true);
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', {reply_markup: {remove_keyboard: true}});
  }
  private async handleLoginToShop(ctx: Context, code: string) {
    const telegramId = ctx.state.employee!.telegramId;
    try {
      
      const employee = await this.employeeAuthService.confirmLoginCode(telegramId, code);
      //TODO: —Ä–∞–∑–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–µ
      // await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–ª–∞–Ω—à–µ—Ç—É.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
      await ctx.reply(employee.token);
    } catch (err) {
      console.error(err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –≤—ã –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ –º–∞–≥–∞–∑–∏–Ω–æ–º.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    }
    this.clearMaps();
  }

  private async handleContactRequest(ctx: Context) {
    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
      Markup.keyboard([
        Markup.button.contactRequest('üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
      ]).resize()
    );
  }

  private async handleEmployeeRegister(ctx: Context) {
    if (!ctx.message || !('contact' in ctx.message) || !ctx.from) return;
    const contact = (ctx.message as any).contact;
    const telegramUser = ctx.from;

    const dto: RegisterEmployeeDto = {
      phone: contact.phone_number,
      telegramId: telegramUser.id,
      telegramUsername: telegramUser.username ?? '',
      telegramFirstName: telegramUser.first_name ?? '',
      telegramLastName: telegramUser.last_name ?? '',
      employeeName: telegramUser.first_name + ' ' + (telegramUser.last_name ?? ''),
    };

    try {
      const result = await this.employeeAuthService.registerViaTelegram(dto);

      // await ctx.reply(`–í–∞—à —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞: ${result.token}`);
    } catch (error) {
      if (error instanceof BadRequestException) await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
      else {
        console.error(error);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
      }
    }
  }

  private async handleAcceptLoginToShop(ctx: EmployeeContext) {
    const telegramId = ctx.state.employee!.telegramId;
    const loginCode = this.awaitingEmployeeAnswerToLoginToShop.get(telegramId);
    if (!loginCode) return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    try {
      await this.employeeAuthService.confirmLoginToShop(loginCode);
      await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–ª–∞–Ω—à–µ—Ç—É.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    } catch (err) {
      console.error(err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –≤—ã –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ –º–∞–≥–∞–∑–∏–Ω–æ–º.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    }
    this.clearMaps();
  }

  private async handleRejectLoginToShop(ctx: EmployeeContext) {
    const telegramId = ctx.state.employee!.telegramId;
    const loginCode = this.awaitingEmployeeAnswerToLoginToShop.get(telegramId);
    if (!loginCode) return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    try {
      await this.employeeAuthService.rejectLoginToShop(loginCode);
      await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    } catch (err) {
      console.error(err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –≤—Ö–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –≤—ã –Ω–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω—ã –∑–∞ –º–∞–≥–∞–∑–∏–Ω–æ–º.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    }
    this.clearMaps();
  }



  // –æ—Ç–∫—Ä–µ–ø–æ–µ–Ω–∏–µ
  private async getLeaveTheSellerMenu(ctx: EmployeeContext) {
    return await ctx.reply(
      '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä–µ–ø–∏—Ç—å—Å—è –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏?',
      Markup.keyboard([
        [MENU_BUTTONS.leaveConfirm],
        [MENU_BUTTONS.main]
      ])
        .resize()
        .oneTime(false)
    );
  }
  private async confirmLeaveTheSeller(ctx: EmployeeContext) {
    const telegramId = ctx.state.employee!.telegramId;
    await this.employeeForEmployeeService.leaveTheEmployer(telegramId);
    await ctx.reply('‚úÖ –í—ã –æ—Ç–∫—Ä–µ–ø–∏–ª–∏—Å—å –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
  }



  // —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  private async getEmployeeInfo(ctx: EmployeeContext) {
    const employeeInfo: EmployeeForEmployeeTelegramBotResponseDto = ctx.state.employee!;

    const domain = this.configService.get<string>('WEBHOOK_DOMAIN') || 'http://localhost:3000';
    const message = formatEmployeeInfoMessage(employeeInfo);
    const avatarUrl = formatEmployeeAvatar(domain, employeeInfo.employeeAvatar);

    if (avatarUrl) {
      try {
        await ctx.replyWithPhoto(avatarUrl);
      } catch (e: any) {
        if (
          e.description && (
            e.description.includes('failed to get HTTP URL content') ||
            e.description.includes('wrong type of the web page content')
          )
        ) {
          await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ, –∞ —Ç–∞–∫–∂–µ —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
        } else {
          throw e;
        }
      }
    }
    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        keyboard: [[MENU_BUTTONS.main],[MENU_BUTTONS.edit]],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    });
  }
  private async getEditMenu(ctx: EmployeeContext) {
    const employee = ctx.state.employee!;
    const keyboardArray = employee.employer ? [
      [EDIT_BUTTONS.name, EDIT_BUTTONS.avatar], [MENU_BUTTONS.leaveTheSeller]
    ] : [
      [EDIT_BUTTONS.name, EDIT_BUTTONS.avatar]
    ];
    return ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard(keyboardArray)
      .resize()
      .oneTime(false)
    );
  }



  // –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
  private async askEditName(ctx: EmployeeContext) {
    this.clearMaps();
    const telegramId = ctx.state.employee!.telegramId;
    this.awaitingEmployeeEditName.set(telegramId, true);
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:', {reply_markup: {remove_keyboard: true}});
  }
  private async handleEditName(ctx: EmployeeContext, name: string) {
    const telegramId = ctx.state.employee!.telegramId;
    try {
      await this.employeeForEmployeeService.updateEmployeeName(telegramId, name);
      await ctx.reply('‚úÖ –ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ.');
    } catch (error) {
      console.error(error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è.');
    }
    this.clearMaps();
    await this.getEmployeeInfo(ctx);
  }



  // –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä
  private async askEditAvatar(ctx: EmployeeContext) {
    this.clearMaps();
    const telegramId = ctx.state.employee!.telegramId;
    this.awaitingEmployeeEditAvatar.set(telegramId, true);
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:', {reply_markup: {remove_keyboard: true}});
  }
  private async handleEditAvatar(ctx: EmployeeContext, fileId: string) {
    const telegramId = ctx.state.employee!.telegramId;
    try {
      await this.employeeForEmployeeService.updateEmployeeAvatarViaTelegram(telegramId, fileId);
      await ctx.reply('‚úÖ –§–æ—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–æ.');
    } catch (error) {
      console.error(error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ç–æ.');
    }
    this.clearMaps();
    await this.getEmployeeInfo(ctx);
  }



  // —Ä–∞–±–æ—Ç–∞ —Å –∑–∞–ø—Ä—Å–∞–º–∏
  private async getRequests(ctx: EmployeeContext) {
    const telegramId = (ctx.state.employee!.telegramId);

    const requests = await this.employeeForEmployeeService.getEmployeeRequestsByTelegramId(telegramId);
    if (!requests || requests.length === 0) return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–µ–∫—Ä–µ–ø–ª–µ–Ω–∏–µ.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());

    this.awaitingChoosingEmployeeRequestId.set(telegramId, true);
    
    const requestsMenu = requests.map(request => [`üìç ${request.from.companyName}#${request.id}`]);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å:', Markup.keyboard([...requestsMenu, [MENU_BUTTONS.main]]).resize());
  }

  private async chooseRequest(ctx: EmployeeContext, requestId: string) {
    const telegramId = (ctx.state.employee!.telegramId);
    const isAwaiting = this.awaitingChoosingEmployeeRequestId.get(telegramId);
    if (!isAwaiting) return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–µ–∫—Ä–µ–ø–ª–µ–Ω–∏–µ.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());

    this.awaitingRequestChangeStatus.set(telegramId, { requestId });
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup.keyboard([
      [MENU_BUTTONS.acceptRequest, MENU_BUTTONS.rejectRequest, MENU_BUTTONS.main]
    ]).resize());
  }

  private async changeRequestStatus(ctx: EmployeeContext, newStatus: RequestToEmployeeStatus.ACCEPTED | RequestToEmployeeStatus.REJECTED) {
    const telegramId = (ctx.state.employee!.telegramId);
    const choosedRequest = this.awaitingRequestChangeStatus.get(telegramId);
    const isAwaiting  = this.awaitingChoosingEmployeeRequestId.get(telegramId);
    if (!isAwaiting || !choosedRequest) return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–µ–∫—Ä–µ–ø–ª–µ–Ω–∏–µ.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());

    await this.employeeForEmployeeService.changeEmployeeRequestStatusByEmployee(telegramId, choosedRequest.requestId, newStatus);
    this.clearMaps();
    await ctx.reply('‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –∏–∑–º–µ–Ω—ë–Ω.');

    const requests = await this.employeeForEmployeeService.getEmployeeRequestsByTelegramId(telegramId);
    if (!requests || requests.length === 0) return await this.getMainMenu(ctx);
    await this.getRequests(ctx);
  }


  // ====================================================
  // PUBLIC METHODS
  // ====================================================

  async notifyEmployee(telegramId: number, message: string, options?: any): Promise<TelegramNotificationResponseDto> {
    try {
      await this.bot.telegram.sendMessage(telegramId, message, options);
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ${telegramId}`);
      return {message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', error: error.message};
    }
  }


  async notifyEmployeeAboutNewOrder(telegramId: number, order: Order): Promise<TelegramNotificationResponseDto> {
    try {
      await this.notifyEmployee(telegramId, formatNewOrderMessage(order));
      return {message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ', error: error.message};
    }

  }

  async notifyEmployeeAboutNewRequestFromSeller(telegramId: number, requestToEmployeeId: string): Promise<TelegramNotificationResponseDto> {
    this.clearMaps();
    this.awaitingChoosingEmployeeRequestId.set(telegramId, true);
    this.awaitingRequestChangeStatus.set(telegramId, { requestId: requestToEmployeeId });
    try {
      const requestToEmployee = await this.employeeForEmployeeService.getEmployeeRequestById(requestToEmployeeId);
      await this.notifyEmployee(
        telegramId,
        `–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–µ–∫—Ä–µ–ø–ª–µ–Ω–∏–µ üìç ${requestToEmployee.from.companyName}#${requestToEmployee.id}`,
        Markup.keyboard([[MENU_BUTTONS.acceptRequest, MENU_BUTTONS.rejectRequest, MENU_BUTTONS.main]]).resize()
      );
      return {message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ', error: error.message};
    }
  }

  async notifyEmployeeAboutLoginToShop(telegramId: number, loginCode: EmployeeLoginCode): Promise<TelegramNotificationResponseDto> {
    try {
      this.awaitingEmployeeAnswerToLoginToShop.set(telegramId, loginCode);
      await this.notifyEmployee(
        telegramId, `–í–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω ${loginCode.shopName}?`,
        Markup.keyboard([[MENU_BUTTONS.loginToShopAccept, MENU_BUTTONS.loginToShopReject]]).resize()
      );
      return {message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–¥–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–¥–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–¥–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –º–∞–≥–∞–∑–∏–Ω', error: error.message};
    }
  }

}
