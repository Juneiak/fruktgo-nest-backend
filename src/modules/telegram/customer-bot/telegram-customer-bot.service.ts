import { Injectable, OnModuleInit, BadRequestException } from '@nestjs/common';
import { Telegraf, Markup, Context } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { Request, Response } from 'express';
import { RegisterCustomerDto } from 'src/modules/auth/customer-auth/customer-auth.dtos';
import { INestApplication } from '@nestjs/common';
import { message } from 'telegraf/filters';
import { CustomerAuthService } from 'src/modules/auth/customer-auth/customer-auth.service';
import { CUSTOMER_BOT_LOGIN_TO_SYSTEM_PREFIX } from 'src/common/constants';
import { CustomerSharedService } from 'src/modules/customer/shared/customer.shared.service';
import { formatCustomerInfoMessage, formatOrderMessage, formatIssueMessage } from './utils';
import { setupWebhook } from "../telegram-utils";
import { CustomerPreviewResponseDto } from 'src/modules/customer/shared/customer.shared.response.dto';
import { OrderSharedService } from 'src/modules/order/shared/order.shared.service';
import { SupportService } from 'src/modules/support/support.service';
import { IssueUserType, IssueStatusText, IssueStatus, Issue} from 'src/modules/support/issue.schema';
import * as moment from 'moment';
import { TelegramNotificationResponseDto } from 'src/common/dtos';
import { Order } from 'src/modules/order/order.schema';

enum MENU_BUTTONS {
  main = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
  support = '‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
  issuesList = 'üìù –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è',
  createIssue = '–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ',
  register = 'üì≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
  login = 'üè™ –í–æ–π—Ç–∏',
  activeOrders = '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
  profile = 'üë§ –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ',
};

interface CustomerContext extends Context {
  state: {
    customer?: CustomerPreviewResponseDto | null;
  };
}

@Injectable()
export class TelegramCustomerBotService implements OnModuleInit {
  private bot: Telegraf;

  // Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  private awaitingCustomerLoginCode: Map<number, boolean> = new Map();
  private awaitingCustomerIssue: Map<number, boolean> = new Map();
  private awaitingChooseIssue: Map<number, boolean> = new Map();

  private async clearMaps() {
    this.awaitingCustomerLoginCode.clear();
    this.awaitingCustomerIssue.clear();
    this.awaitingChooseIssue.clear();
  }
  constructor(
    private readonly configService: ConfigService,
    private readonly customerAuthService: CustomerAuthService,
    private readonly customerSharedService: CustomerSharedService,
    private readonly orderSharedService: OrderSharedService,
    private readonly supportService: SupportService
  ) { 
    const token = this.configService.get<string>('CUSTOMER_BOT_TOKEN');
    if (!token) throw new Error('CUSTOMER_BOT_TOKEN not provided');
    this.bot = new Telegraf(token);
  }

  async onModuleInit() {
    this.setupBot();
  }



  public async setApp(app: INestApplication) {
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegraf webhook –≤ express NestJS
    app.use('/customer-bot', (req: Request, res: Response, next) => {
      
      if (req.method === 'POST') {
        if (req.body && req.body.update_id) {
          this.bot.handleUpdate(req.body, res);
        } else {
          res.status(400).send('Invalid Telegram update');
        }
      } else {
        res.status(200).send('Customer bot webhook');
      }
    });
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    setupWebhook(this.bot, this.configService, 'Customer', '/customer-bot');
  }

  private setupBot() {
    // –æ–±—â–µ–µ
    this.bot.start(async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        await this.handleStart(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.main, async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        this.clearMaps();
        await this.getMainMenu(ctx);
      });
    });



    // —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
    this.bot.hears(MENU_BUTTONS.support, async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        await this.getSupportMenu(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.createIssue, async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        await this.writeIssue(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.issuesList, async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        await this.getIssuesList(ctx);
      });
    });
    this.bot.hears(/^‚ùì –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç (\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}) - ([–ê-–Ø–∞-—è\s]+) \(ID: ([a-f0-9]{24})\)$/, async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        const telegramId = ctx.state.customer!.telegramId;
        if (!this.awaitingChooseIssue.get(telegramId)) return;
        const issueId = (ctx.message as any).text.match(/^‚ùì –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç (\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}) - ([–ê-–Ø–∞-—è\s]+) \(ID: ([a-f0-9]{24})\)$/)[3];
        await this.getFullIssue(ctx, issueId);
        this.clearMaps();
      });
    });


    // —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    this.bot.hears(MENU_BUTTONS.profile, async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        await this.getCustomerInfo(ctx);
      });
    });
    this.bot.hears(MENU_BUTTONS.activeOrders, async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        await this.getCustomerActiveOrders(ctx);
      });
    });



    // —Ä–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è–º–∏
    this.bot.hears(MENU_BUTTONS.register, async (ctx) => {
      await this.handleContactRequest(ctx);
    });
    this.bot.on(message('contact'), async (ctx) => {
      await this.handleCustomerRegister(ctx);
    });
    this.bot.hears(MENU_BUTTONS.login, async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        await this.askLoginCode(ctx);
      });
    });


    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    this.bot.on(message('text'), async (ctx) => {
      await this.checkCustomerExists(ctx, async (ctx: CustomerContext) => {
        const telegramId = ctx.state.customer!.telegramId;
        // —Ä–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
        if (this.awaitingCustomerLoginCode.get(telegramId)) {
          const code = (ctx.message as any).text;
          await this.handleLogin(ctx, code);
          return;
        }
        if (this.awaitingCustomerIssue.get(telegramId)) {
          const message = (ctx.message as any).text;
          await this.sendIssueToSupport(ctx, message);
          return;
        }
        await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
      });
    });

  }


  
  // ====================================================
  // PRIVATE METHODS
  // ====================================================

  // –æ–±—â–µ–µ
  private async checkCustomerExists(ctx: Context, next: (ctx: CustomerContext) => Promise<void>) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');

    const customer = await this.customerSharedService.getCustomerByTelegramId(telegramId);
    if (!customer) {
      await ctx.replyWithMarkdown(
`
*Fruktgo* ‚Äî —Å–≤–µ–∂–∏–µ —Ñ—Ä—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏, –æ–≤–æ—â–∏ –æ—Ç –±–æ–ª–µ–µ 120 –º–∞–≥–∞–∑–∏–Ω–æ–≤ üçì  
üöö –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ | üõí –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã | üìç –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω—ã  
üëâ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´üì≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å
`,
        Markup.keyboard([
          [MENU_BUTTONS.register],
        ]).resize().oneTime(false)
      );
      return;
    }
    // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å employee –≤ ctx.state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    (ctx.state as any).customer = customer;
    await next(ctx as CustomerContext);
  }
  private async handleStart(ctx: CustomerContext) {
    if (!ctx.message || typeof (ctx.message as any).text !== 'string') return await this.getMainMenu(ctx);
    
    const messageText = (ctx.message as any).text;
    const [command, payload] = messageText.split(' ');

    if (payload) {
      const [action, code] = payload.split('_');
      if (action === CUSTOMER_BOT_LOGIN_TO_SYSTEM_PREFIX && code) {
        await this.handleLogin(ctx, code);
        return;
      }
      await ctx.reply(`–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload: ${payload}`, Markup.keyboard([[MENU_BUTTONS.main]]).resize());
      return;
    }
    
    await this.getMainMenu(ctx);
  }
  private async getMainMenu(ctx: CustomerContext) {
    return await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.keyboard([
        [MENU_BUTTONS.login],
        [MENU_BUTTONS.activeOrders],
        [MENU_BUTTONS.profile],
        [MENU_BUTTONS.support],
      ])
        .resize()
        .oneTime(false)
    );
  }

  // —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
  private async getCustomerInfo(ctx: CustomerContext) {
    const customerInfo = ctx.state.customer!;
    const message = formatCustomerInfoMessage(customerInfo);

    await ctx.replyWithMarkdown(message, {
      reply_markup: {
        keyboard: [[MENU_BUTTONS.main]],
        resize_keyboard: true,
        one_time_keyboard: false
      }
    });
  }
  private async getCustomerActiveOrders(ctx: CustomerContext) {
    const telegramId = ctx.state.customer!.telegramId;
    try {
      const orders = await this.orderSharedService.getActiveOrderForCustomerBot(telegramId);
      if (orders.length === 0) return await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
      
      for (const order of orders) {
        await ctx.replyWithMarkdown(formatOrderMessage(order));
      }
      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
    }
  }


  // —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
  private async getSupportMenu(ctx: CustomerContext) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {reply_markup: {keyboard: [[MENU_BUTTONS.issuesList, MENU_BUTTONS.createIssue, MENU_BUTTONS.main]]}});
  }
  private async writeIssue(ctx: CustomerContext) {
    const telegramId = ctx.state.customer!.telegramId;
    this.clearMaps();
    this.awaitingCustomerIssue.set(telegramId, true);

    await ctx.replyWithMarkdown(`
üì® –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.  
‚åõ –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.
`, {reply_markup: {remove_keyboard: true}});
  }
  private async getIssuesList(ctx: CustomerContext) {
    const customerId = ctx.state.customer!.customerId;
    const telegramId = ctx.state.customer!.telegramId;
    const issues = await this.supportService.getCustomerIssues(customerId);
    
    if (issues.length === 0) return await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.', {reply_markup: {keyboard: [[MENU_BUTTONS.createIssue, MENU_BUTTONS.main]]}});
    
    const issueButtons = issues.map(issue => {
      const date = new Date(issue.createdAt);
      const formattedDate = moment(date).format('DD.MM.YY');
      return [`‚ùì –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç ${formattedDate} - ${IssueStatusText[issue.status || IssueStatus.NEW]} (ID: ${issue.issueId})`]
    });
    
    this.clearMaps();
    this.awaitingChooseIssue.set(telegramId, true);
    issueButtons.push([MENU_BUTTONS.main]);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:', {reply_markup: {keyboard: issueButtons}});
  }
  private async getFullIssue(ctx: CustomerContext, issueId: string) {
    const customerId = ctx.state.customer!.customerId;

    try {
      const issue = await this.supportService.getCustomerIssue(customerId, issueId);
      if (!issue) return await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ.', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const formattedMessage = formatIssueMessage(issue);
      await ctx.replyWithMarkdown(formattedMessage, {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
    }
  }
  private async sendIssueToSupport(ctx: CustomerContext, issueText: string) {
    const telegramId = ctx.state.customer!.telegramId;
    const customerId = ctx.state.customer!.customerId;
    try {
      await this.supportService.createIssueToSupport(customerId, IssueUserType.CUSTOMER, telegramId, issueText);
      await ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–∫–æ—Ä–æ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
      return;
    }
    this.clearMaps();
  }


  // —Ä–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  //// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
  private async handleContactRequest(ctx: Context) {
    //TODO: –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    await ctx.replyWithMarkdown(
`
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
–ü—Ä–æ–¥–æ–ª–∂–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤—ã:

‚úÖ *–¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö*  
‚úÖ *–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–µ —Å* [–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏](#)  
‚úÖ *–ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è* [–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è](#)
`,
      Markup.keyboard([Markup.button.contactRequest('üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),]).resize()
    );
  }
  private async handleCustomerRegister(ctx: Context) {
    if (!ctx.message || !('contact' in ctx.message) || !ctx.from) return;
    const contact = (ctx.message as any).contact;
    const telegramUser = ctx.from;

    const dto: RegisterCustomerDto = {
      phone: contact.phone_number,
      telegramId: telegramUser.id,
      telegramUsername: telegramUser.username ?? '',
      telegramFirstName: telegramUser.first_name ?? '',
      telegramLastName: telegramUser.last_name ?? '',
      customerName: telegramUser.first_name + ' ' + (telegramUser.last_name ?? ''),
    };
    try {
      const result = await this.customerAuthService.registerViaTelegram(dto);
      await ctx.reply('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    } catch (error) {
      if (error instanceof BadRequestException) await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
      else {
        console.error(error);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
      }
    }
  }
  //// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  private async askLoginCode(ctx: CustomerContext) {
    const telegramId = ctx.state.customer!.telegramId;
    this.awaitingCustomerLoginCode.set(telegramId, true);
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {reply_markup: {remove_keyboard: true}});
  }
  private async handleLogin(ctx: Context, code: string) {
    const telegramId = ctx.state.customer!.telegramId;
    try {
      const customer = await this.customerAuthService.confirmLoginCode(telegramId, code);
      //TODO: —Ä–∞–∑–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–µ
      // await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
      await ctx.reply(customer.token);
    } catch (err) {
      console.error(err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    }
    this.clearMaps();
  }




  // ====================================================
  // PUBLIC METHODS
  // ====================================================

  async notifyCustomer(telegramId: number, message: string, options?: {reply_markup?: any}): Promise<TelegramNotificationResponseDto> {
    try {
      await this.bot.telegram.sendMessage(telegramId, message, options);
      return {message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', error: error.message};
    }
  }

  async notifyCustomerAboutOrderUpdate(telegramId: number, order: Order): Promise<TelegramNotificationResponseDto> {
    try {
      await this.bot.telegram.sendMessage(telegramId, formatOrderMessage(order, {isUpdated: true}));
      return {message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞', error: error.message};
    }
  }

  async notifyCustomerAboutIssueUpdate(telegramId: number, issue: Issue): Promise<TelegramNotificationResponseDto> {
    try {
      await this.bot.telegram.sendMessage(telegramId, formatIssueMessage(issue, {isUpdated: true}));
      return {message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è', error: error.message};
    }
  }
}
