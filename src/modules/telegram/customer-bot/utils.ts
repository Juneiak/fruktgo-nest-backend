import { CustomerPreviewForTelegramBotResponseDto } from "src/modules/customer/customer/customer.request.dto";
import { IssueStatusText } from "src/modules/support/issue.schema";
import * as moment from 'moment';
import { Order } from 'src/modules/order/order.schema';
import {Issue} from 'src/modules/support/issue.schema';
import {OrderStatus} from 'src/modules/order/order.schema';
import { ORDER_STATUS_DISPLAY_MAP } from 'src/modules/order/order.schema';

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown –≤ —Ç–µ–∫—Å—Ç–µ
 * –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
 */
export function escapeMarkdown(text: string): string {
  if (!text) return '';
  // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã: _ * [ ] ( ) ~ ` > # + - = | { } . !
  return String(text).replace(/([_*\[\]()~`>#+\-=|{}.!])/g, '\\$1');
}

export function formatCustomerInfoMessage(customerInfo: CustomerPreviewForTelegramBotResponseDto): string {
  const {
    isBlocked,
    verifiedStatus,
    customerName,
    phone,
    bonusPoints,
    telegramUsername,
  } = customerInfo;

  const statusStr = isBlocked
    ? 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
    : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω';

  const verifiedStr = verifiedStatus
    ? 'üîí –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
    : '‚ùóÔ∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω';

  const name = escapeMarkdown(customerName) || '‚Äî';
  const phoneStr = escapeMarkdown(phone) || '‚Äî';
  const bonusStr = typeof bonusPoints === 'number' ? bonusPoints : '‚Äî';
  const tgUsernameStr = telegramUsername ? `@${escapeMarkdown(telegramUsername)}` : '‚Äî';

  const message = `
*–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*

*${statusStr} ${verifiedStr}*

*üë§ –ò–º—è:* ${name}
*üì± –¢–µ–ª–µ—Ñ–æ–Ω:* ${phoneStr}
*üèÖ –ë–æ–Ω—É—Å—ã:* ${bonusStr}
*üÜî Telegram:* ${tgUsernameStr}
  `.trim();

  return message;
}

export function formatOrderMessage(order: Order, options: {isUpdated: boolean}={isUpdated: false}): string {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
  if (!order) return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';

  // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
  const orderId = order.orderId.slice(-4);
  const orderStatus = order.orderStatus;
  const orderedAt = order.orderedAt;
  const orderedFrom = order.orderedFrom;
  const canceledReason = order.canceledReason;
  const deliveredAt = order.deliveredAt;
  const canceledAt = order.canceledAt;

  // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const finances = order.finances || {};
  const sentSum = finances.sentSum;
  const usedBonusPoints = finances.usedBonusPoints;
  const totalWeightCompensationBonus = finances.totalWeightCompensationBonus;

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ü–µ–Ω–∫–µ
  const rating = order.rating || {};
  const settedRating = rating.settedRating;

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Ä—Ç—É —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
  const statusStr = ORDER_STATUS_DISPLAY_MAP[orderStatus] || escapeMarkdown(orderStatus);

  // –ú–∞–≥–∞–∑–∏–Ω
  const shopStr = orderedFrom?.shopName ? `–ú–∞–≥–∞–∑–∏–Ω: ${escapeMarkdown(orderedFrom.shopName)}` : '';

  // –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞
  const sumStr = typeof sentSum === 'number' ? `${sentSum} ‚ÇΩ` : '‚Äî';
  
  // –ë–æ–Ω—É—Å—ã
  const usedBonusStr = usedBonusPoints ? `- ${usedBonusPoints} –±–æ–Ω—É—Å–æ–≤` : '';
  const bonusStr = totalWeightCompensationBonus ? `+${totalWeightCompensationBonus} –±–æ–Ω—É—Å–æ–≤` : '';
  
  // –û—Ü–µ–Ω–∫–∞
  const ratingStr = settedRating ? `‚≠êÔ∏è –û—Ü–µ–Ω–∫–∞: ${settedRating}/5` : '';
  
  // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
  const dateStr = orderedAt ? moment(orderedAt).format('DD.MM.YY HH:mm') : '‚Äî';
  
  // –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏/–æ—Ç–º–µ–Ω—ã
  const deliveredStr = deliveredAt ? `üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω: ${moment(deliveredAt).format('DD.MM.YY HH:mm')}` : '';
  const canceledStr = canceledAt ? `‚ùå –û—Ç–º–µ–Ω—ë–Ω: ${moment(canceledAt).format('DD.MM.YY HH:mm')}${canceledReason ? ` (${escapeMarkdown(canceledReason)})` : ''}` : '';


  return `
*–ó–∞–∫–∞–∑ ‚Ññ${orderId}${options.isUpdated ? ' –æ–±–Ω–æ–≤–ª–µ–Ω!' : ''}*

*–°—Ç–∞—Ç—É—Å:* ${statusStr}
${shopStr}
*–°–æ–∑–¥–∞–Ω:* ${dateStr}
${deliveredStr || canceledStr}

*–°—É–º–º–∞:* ${sumStr} ${usedBonusStr}
${bonusStr}
${ratingStr}
  `.replace(/\n{2,}/g, '\n').trim();
}

export function formatIssueMessage(issue: Issue, options: {isUpdated: boolean}={isUpdated: false}): string {
  const { createdAt, status, issueText, result, issueId } = issue;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º IssueStatusText –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
  const statusText = status ? escapeMarkdown(IssueStatusText[status]) : escapeMarkdown(IssueStatusText.NEW);
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å –ø–æ–º–æ—â—å—é moment
  const dateStr = moment(createdAt).format('DD.MM.YYYY HH:mm');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏
  const resultText = result ? `*–û—Ç–≤–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:*
${escapeMarkdown(result)}` : '';

  return `
*–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ${issueId.slice(-4)}${options.isUpdated ? ' –æ–±–Ω–æ–≤–ª–µ–Ω!' : ''}*

*–°—Ç–∞—Ç—É—Å:* ${statusText}
*–°–æ–∑–¥–∞–Ω–æ:* ${dateStr}

*–í–∞—à –∑–∞–ø—Ä–æ—Å:*
${escapeMarkdown(issueText)}

${resultText}
`.trim();
}