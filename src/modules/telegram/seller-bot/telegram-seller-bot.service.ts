import { Injectable, OnModuleInit, BadRequestException } from '@nestjs/common';
import { Telegraf, Markup, Context } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { Request, Response } from 'express';
import { SellerAuthService } from 'src/modules/auth/seller-auth/seller-auth.service';
import { INestApplication } from '@nestjs/common';
import { RegisterSellerDto } from 'src/modules/auth/seller-auth/seller-auth.dtos';
import { SellerSharedService } from 'src/modules/seller/seller.shared.service';
import {
  SELLER_BOT_LOGIN_TO_SELLER_DASHBOARD_PREFIX, SELLER_BOT_LOGIN_TO_SHOP_PREFIX} from 'src/common/constants';
import { Seller } from 'src/modules/seller/seller.schema';
import { setupWebhook } from "../telegram-utils";
import { ShiftSharedService } from 'src/modules/shop/shift/shared/shift.shared.service';
import { SupportService } from 'src/modules/support/support.service';
import {IssueUserType, IssueStatusText, IssueStatus, Issue} from 'src/modules/support/issue.schema';
import * as moment from 'moment';
import { TelegramNotificationResponseDto } from 'src/common/dtos';
import { Shift } from 'src/modules/shop/shift/shift.schema';
import { formatIssueMessage, formatShiftMessage } from './utils';
import { message } from 'telegraf/filters';
     
enum MENU_BUTTONS {
  main = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
  support = '‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞',
  issuesList = 'üìù –ú–æ–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è',
  createIssue = '–°–æ–∑–¥–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ',
  loginToSellerDashboard = '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–¥–∞–≤—Ü–∞',
  loginToShop = '–í–æ–π—Ç–∏ –≤ –º–∞–≥–∞–∑–∏–Ω',
  register = 'üì≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è',
  shops = '–ú–æ–∏ –º–∞–≥–∞–∑–∏–Ω—ã',
  activeShifts = '–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–º–µ–Ω—ã',

  helloRuslan = '–ü—Ä–∏–≤–µ—Ç, –†—É—Å–ª–∞–Ω!',
};

interface SellerContext extends Context {
  state: {
    seller?: Seller | null;
  };
}

@Injectable()
export class TelegramSellerBotService implements OnModuleInit {
  private bot: Telegraf;
  private tempShopLoginCodes = new Map<number, { code: string }>();
  
  // Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è 
  private awaitingSellerLoginCode: Map<number, boolean> = new Map();
  private awaitingShopLoginCode: Map<number, boolean> = new Map();
  private awaitingSellerIssue: Map<number, boolean> = new Map();
  private awaitingChooseIssue: Map<number, boolean> = new Map();

  private async clearMaps() {
    this.awaitingSellerLoginCode.clear();
    this.awaitingShopLoginCode.clear();
    this.awaitingSellerIssue.clear();
    this.awaitingChooseIssue.clear();
  }

  constructor(
    private readonly configService: ConfigService,
    private readonly sellerAuthService: SellerAuthService,
    private readonly sellerSharedService: SellerSharedService,
    private readonly shiftSharedService: ShiftSharedService,
    private readonly supportService: SupportService
  ) {
    const token = this.configService.get<string>('SELLER_BOT_TOKEN');
    if (!token) throw new Error('SELLER_BOT_TOKEN not provided');
    this.bot = new Telegraf(token);
  }

  async onModuleInit() {
    this.setupBot();
  }



  public async setApp(app: INestApplication) {
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegraf webhook –≤ express NestJS
    app.use('/seller-bot', (req: Request, res: Response, next) => {
      
      if (req.method === 'POST') {
        if (req.body && req.body.update_id) {
          this.bot.handleUpdate(req.body, res);
        } else {
          res.status(400).send('Invalid Telegram update');
        }
      } else {
        res.status(200).send('Seller bot webhook');
      }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    setupWebhook(this.bot, this.configService, 'Seller', '/seller-bot');
  }

  private setupBot() {
    // –æ–±—â–µ–µ
    this.bot.start(async (ctx) => {
      await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
        await this.handleStart(ctx);
      });
    });
    
    this.bot.hears(MENU_BUTTONS.main, async (ctx) => {
      await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
        this.clearMaps();
        this.tempShopLoginCodes.clear();
        await this.getMainMenu(ctx);
      });
    });




    // —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
      this.bot.hears(MENU_BUTTONS.support, async (ctx) => {
        await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
          await this.getSupportMenu(ctx);
        });
      });

      this.bot.hears(MENU_BUTTONS.createIssue, async (ctx) => {
        await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
          await this.writeIssue(ctx);
        });
      });

      this.bot.hears(MENU_BUTTONS.issuesList, async (ctx) => {
        await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
          await this.getIssuesList(ctx);
        });
      });

      this.bot.hears(/^‚ùì –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç (\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}) - ([–ê-–Ø–∞-—è\s]+) \(ID: ([a-f0-9]{24})\)$/, async (ctx) => {
        await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
          const telegramId = ctx.state.seller!.telegramId;
          if (!this.awaitingChooseIssue.get(telegramId)) return;
          const issueId = (ctx.message as any).text.match(/^‚ùì –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç (\d{2}\.\d{2}\.\d{4} \d{2}:\d{2}) - ([–ê-–Ø–∞-—è\s]+) \(ID: ([a-f0-9]{24})\)$/)[3];
          await this.getFullIssue(ctx, issueId);
          this.clearMaps();
        });
      });




    // –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    //// –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
    this.bot.hears(MENU_BUTTONS.register, async (ctx) => {
      await this.handleSellerRegister(ctx);
    });

    this.bot.on(message('contact'), async (ctx) => {
      await this.handleContact(ctx);
    });

    //// –≤—Ö–æ–¥ –≤ –¥–∞—à–±–æ—Ä–¥ —Å–µ–ª–ª–µ—Ä–∞ –ø–æ –∫–æ–¥—É
    this.bot.hears(MENU_BUTTONS.loginToSellerDashboard, async (ctx) => {
      await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
        await this.hendleWriteCodeToLoginToSellerDashboard(ctx);
      });
    });

    //// –≤—Ö–æ–¥ –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ –∫–æ–¥—É
    this.bot.hears(MENU_BUTTONS.loginToShop, async (ctx) => {
      await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
        await this.hendleWriteCodeToLoginToShop(ctx);
      });
    });

    //// –≤—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞
    this.bot.hears(/^üìç (.+)#([a-f0-9]{24})$/, async (ctx) => {
      await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
        const shopId = (ctx.message as any).text.match(/^üìç (.+)#([a-f0-9]{24})$/)[2];
        await this.handleShopLogin(ctx, shopId);
      });
    });




    // —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    this.bot.hears(MENU_BUTTONS.shops, async (ctx) => {
      await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
        await this.getSellerShopsList(ctx);
      });
    });

    this.bot.hears(MENU_BUTTONS.activeShifts, async (ctx) => {
      await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
        await this.getSellerActiveShifts(ctx);
      });
    })




    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±–æ–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–¥–æ–≤
    this.bot.on(message('text'), async (ctx) => {
      await this.checkSellerExists(ctx, async (ctx: SellerContext) => {
        const telegramId = (ctx.state.seller!.telegramId);

        if (this.awaitingSellerLoginCode.get(telegramId)) {
          const code = (ctx.message as any).text;
          await this.handleLoginToSellerDashboard(ctx, code);
          this.clearMaps();
          return;
        }
      
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –º–∞–≥–∞–∑–∏–Ω–∞
        if (this.awaitingShopLoginCode.get(telegramId)) {
          const code = (ctx.message as any).text;
          await this.handleShopSelectToLogin(ctx, code);
          this.clearMaps();
          return;
        }

        if (this.awaitingSellerIssue.get(telegramId)) {
          const issueText = (ctx.message as any).text;
          await this.sendIssueToSupport(ctx, issueText);
          this.clearMaps();
          return;
        }

        await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
      });
    });
  }


  // ====================================================
  // PRIVATE METHODS
  // ====================================================

  // –æ–±—â–µ–µ
  private async checkSellerExists(ctx: Context, next: (ctx: SellerContext) => Promise<void>) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    const seller = await this.sellerSharedService.getSellerByTelegramId(telegramId);
    if (!seller) {
      await ctx.replyWithMarkdown(
`
*–ü—Ä–æ–¥–∞–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ —Å Fruktgo!*  
–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –¥–ª—è —Ñ—Ä—É–∫—Ç–æ–≤—ã—Ö –ª–∞–≤–æ–∫, –∫–æ—Ç–æ—Ä—ã–º –¥–æ–≤–µ—Ä—è—é—Ç.

üçä 120+ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —É–∂–µ —Å –Ω–∞–º–∏ ‚Äî –æ—Ç —á–∞—Å—Ç–Ω—ã—Ö –ª–∞–≤–æ–∫ –¥–æ —Å–µ—Ç–µ–π

üöö –ú—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è –æ–Ω–ª–∞–π–Ω-–ø—Ä–æ–¥–∞–∂–∏, –æ–ø–ª–∞—Ç—É –∏ –¥–æ—Å—Ç–∞–≤–∫—É

üìà –ü–æ–º–æ–≥–∞–µ–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –±–æ–ª—å—à–µ:
  ‚Ä¢ +22% –∫ –æ–±–æ—Ä–æ—Ç—É —É–∂–µ –≤ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü
  ‚Ä¢ +15% –∫ —Å—Ä–µ–¥–Ω–µ–º—É —á–µ–∫—É –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–ª–∞—Ç—ë–∂–µ—Å–ø–æ—Å–æ–±–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
  ‚Ä¢ -10% –∫ —Å–ø–∏—Å–∞–Ω–∏—è–º –∑–∞ —Å—á—ë—Ç –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–ø—Ä–æ—Å–∞
_–ü–æ –¥–∞–Ω–Ω—ã–º –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ_

üì± –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Telegram + –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
üîí –ë–µ–∑ —Å–∫—Ä—ã—Ç—ã—Ö –∫–æ–º–∏—Å—Å–∏–π –∏ —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

‚è≥ *–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–µ–∑ Fruktgo ‚Äî —ç—Ç–æ –Ω–µ–¥–æ–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã*

üëâ –ù–∞–∂–º–∏—Ç–µ ¬´üì≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è¬ª –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–≤–æ–π –º–∞–≥–∞–∑–∏–Ω –∑–∞ 5 –º–∏–Ω—É—Ç
`,
        Markup.keyboard([
          [MENU_BUTTONS.register],
        ]).resize().oneTime(false)
      );
      return;
    }
    // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å employee –≤ ctx.state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    (ctx.state as any).seller = seller;
    await next(ctx as SellerContext);
  }

  private async handleStart(ctx: SellerContext) {
    const telegramId = ctx.state.seller!.telegramId;
    if (!ctx.message || typeof (ctx.message as any).text !== 'string') return await this.getMainMenu(ctx);
    
    const messageText = (ctx.message as any).text;
    const [command, payload] = messageText.split(' ');

    console.log(payload);
    
    if (payload) {
      const [action, code] = payload.split('_');
      if (action === SELLER_BOT_LOGIN_TO_SELLER_DASHBOARD_PREFIX && code) {
        await this.handleLoginToSellerDashboard(ctx, code);
        return;
      }

      if (action === SELLER_BOT_LOGIN_TO_SHOP_PREFIX && code) {
        await this.handleShopSelectToLogin(ctx, code);
        return;
      }
    }
    
    if (this.awaitingSellerIssue.get(telegramId)) {
      const issueText = (ctx.message as any).text;
      await this.sendIssueToSupport(ctx, issueText);
      return;
    }

    await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ QR-–∫–æ–¥.', Markup.keyboard([[MENU_BUTTONS.main]]));
  }

  private async getMainMenu(ctx: SellerContext) {
    return await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.keyboard([
        [MENU_BUTTONS.shops],
        [MENU_BUTTONS.activeShifts],
        [MENU_BUTTONS.loginToSellerDashboard],
        [MENU_BUTTONS.loginToShop],
        [MENU_BUTTONS.support],
      ])
        .resize()
        .oneTime(false)
    );
  }

  // –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  //// —Ä–µ–≥–∞ —Å–µ–ª–ª–µ—Ä–∞
  private async handleSellerRegister(ctx: Context) {
    await ctx.reply(
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.',
      Markup.keyboard([
        Markup.button.contactRequest('üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
      ]).resize()
    );
  }

  private async handleContact(ctx: Context) {
    const message = ctx.message as { contact?: any };
    const contact = message.contact;
    const telegramUser = ctx.from;

    if (!contact || !telegramUser) return;

    const dto: RegisterSellerDto = {
      phone: contact.phone_number,
      telegramId: telegramUser.id,
      telegramUsername: telegramUser.username ?? '',
      telegramFirstName: telegramUser.first_name ?? '',
      telegramLastName: telegramUser.last_name ?? '',
    };

    try {
      const result = await this.sellerAuthService.registerSellerViaTelegram(dto);
      await ctx.reply('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    } catch (error) {
      if (error instanceof BadRequestException) await ctx.reply(`‚ö†Ô∏è –û—à–∏–±–∫–∞: ${error.message}`);
      else {
        console.error(error);
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
      }
    }
    await this.getMainMenu(ctx);
  }

  //// –≤ –¥–∞—à–±–æ—Ä–¥ —Å–µ–ª–ª–µ—Ä–∞
  private async hendleWriteCodeToLoginToSellerDashboard(ctx: SellerContext) {
    const telegramId = (ctx.state.seller!.telegramId);
    this.clearMaps();
    this.awaitingSellerLoginCode.set(telegramId, true);
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞:', {reply_markup: {remove_keyboard: true}});
  }

  private async handleLoginToSellerDashboard(ctx: SellerContext, code: string) {
    const telegramId = (ctx.state.seller!.telegramId);
    try {
      const seller = await this.sellerAuthService.confirmLoginSellerCode(code, telegramId);
      //TODO: —Ä–∞–∑–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–µ
      // await ctx.reply('‚úÖ –í—Ö–æ–¥ –≤ –¥–∞—à–±–æ—Ä–¥ –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.', Markup.keyboard([[MENU_BUTTONS.main],]).resize());
      await ctx.reply(seller.token, Markup.keyboard([[MENU_BUTTONS.main],]).resize());
    } catch (err) {
      console.error(err);
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –≤—Ö–æ–¥–∞ –≤ –¥–∞—à–±–æ—Ä–¥.', Markup.keyboard([[MENU_BUTTONS.main],]).resize());
    }
    this.clearMaps();
  }

  //// –≤ –¥–∞—à–±–æ—Ä–¥ –º–∞–≥–∞–∑–∏–Ω–∞
  private async hendleWriteCodeToLoginToShop(ctx: SellerContext) {
    const telegramId = (ctx.state.seller!.telegramId);
    this.clearMaps();
    this.awaitingShopLoginCode.set(telegramId, true);
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞:', {reply_markup: {remove_keyboard: true}});
  }

  private async handleShopSelectToLogin(ctx: SellerContext, code: string) {
    const telegramId = (ctx.state.seller!.telegramId);
    
    const shops = await this.sellerSharedService.getSellerShopsByTelegramId(telegramId);
    if (!shops || shops.length === 0) return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.', Markup.keyboard([[MENU_BUTTONS.main],]).resize());
    
    this.tempShopLoginCodes.set(telegramId, { code });

    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –≤—Ö–æ–¥–∞:', Markup.keyboard(
      shops.map(shop => [`üìç ${shop.shopName}#${shop._id.toString()}`])
    ).resize());
  }

  private async handleShopLogin(ctx: SellerContext, shopId: string) {
    const telegramId = (ctx.state.seller!.telegramId);

    const shopLoginData = this.tempShopLoginCodes.get(telegramId);
    if (!shopLoginData) return await ctx.reply('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥ –≤—Ö–æ–¥–∞.', Markup.keyboard([[MENU_BUTTONS.main],]).resize());

    try {
      const shop = await this.sellerAuthService.confirmLoginCodeForShop(shopLoginData.code, telegramId, shopId);
      this.tempShopLoginCodes.delete(telegramId);

      //TODO: —Ä–∞–∑–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–µ
      // await ctx.reply('‚úÖ –í—Ö–æ–¥ –≤ –º–∞–≥–∞–∑–∏–Ω –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –¥–∞—à–±–æ—Ä–¥.', Markup.keyboard([[MENU_BUTTONS.main],]).resize());
      await ctx.reply(shop.token);
    } catch (error) {
        console.error(error);
        this.tempShopLoginCodes.delete(telegramId);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –≤—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –º–∞–≥–∞–∑–∏–Ω—É.', Markup.keyboard([[MENU_BUTTONS.main],]).resize());
      }
      this.clearMaps();
  }




  // —Ä–∞–±–æ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
  private async getSupportMenu(ctx: SellerContext) {
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {reply_markup: {keyboard: [[MENU_BUTTONS.issuesList, MENU_BUTTONS.createIssue, MENU_BUTTONS.main]]}});
  }

  private async writeIssue(ctx: SellerContext) {
    const telegramId = ctx.state.seller!.telegramId;
    this.clearMaps();
    this.awaitingSellerIssue.set(telegramId, true);

    await ctx.replyWithMarkdown(`
üì® –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å ‚Äî –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –µ–≥–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.  
‚åõ –û–±—ã—á–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 15‚Äì30 –º–∏–Ω—É—Ç –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è.
`, {reply_markup: {remove_keyboard: true}});
  }
  
  private async getIssuesList(ctx: SellerContext) {
    const sellerId = ctx.state.seller!.sellerId;
    const telegramId = ctx.state.seller!.telegramId;
    const issues = await this.supportService.getSellerIssues(sellerId);
    
    if (issues.length === 0) return await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.', {reply_markup: {keyboard: [[MENU_BUTTONS.createIssue, MENU_BUTTONS.main]]}});
    
    const issueButtons = issues.map(issue => {
      const date = new Date(issue.createdAt);
      const formattedDate = moment(date).format('DD.MM.YY');
      return [`‚ùì –û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç ${formattedDate} - ${IssueStatusText[issue.status || IssueStatus.NEW]} (ID: ${issue.issueId})`]
    });
    
    this.clearMaps();
    this.awaitingChooseIssue.set(telegramId, true);
    issueButtons.push([MENU_BUTTONS.main]);
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:', {reply_markup: {keyboard: issueButtons}});
  }

  private async getFullIssue(ctx: SellerContext, issueId: string) {
    const sellerId = ctx.state.seller!.sellerId;

    try {
      const issue = await this.supportService.getSellerIssue(sellerId, issueId);
      if (!issue) return await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ.', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const formattedMessage = formatIssueMessage(issue);
      await ctx.replyWithMarkdown(formattedMessage, {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—Ä–∞—â–µ–Ω–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
    }
  }

  private async sendIssueToSupport(ctx: SellerContext, issueText: string) {
    const telegramId = ctx.state.seller!.telegramId;
    const sellerId = ctx.state.seller!.sellerId;
    try {
      await this.supportService.createIssueToSupport(sellerId, IssueUserType.SELLER, telegramId, issueText);
      await ctx.reply('–°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –°–∫–æ—Ä–æ –º—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è!', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', {reply_markup: {keyboard: [[MENU_BUTTONS.main]]}});
      return;
    }
    this.clearMaps();
  }




  // —Ä–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
  private async getSellerShopsList(ctx: SellerContext) {
    const telegramId = (ctx.state.seller!.telegramId);
    try {
      const shops = await this.sellerSharedService.getSellerShopsByTelegramId(telegramId);
      if (!shops || shops.length === 0) return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞–≥–∞–∑–∏–Ω–æ–≤.');

      await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:', Markup.keyboard(
        shops.map(shop => [`üìç ${shop.shopName} #${shop._id.toString()}`])
      ).resize());
    } catch (error) {
      console.error(error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤.', Markup.keyboard([[MENU_BUTTONS.main],]).resize());
    }
  }

  private async getSellerActiveShifts(ctx: SellerContext) {
    const telegramId = (ctx.state.seller!.telegramId);
    try {
      const activeShifts = await this.shiftSharedService.getSellerActiveShiftsByTelegramId(telegramId);
      if (!activeShifts || activeShifts.length === 0) return await ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω.', Markup.keyboard([[MENU_BUTTONS.main],]).resize());

      for (const shift of activeShifts) {
        const msg = [
          `‚è∞ –°–º–µ–Ω–∞ #${shift.shiftId}`,
          `–ú–∞–≥–∞–∑–∏–Ω: ${shift.shop.shopName || shift.shop || '‚Äî'}`,
          `–û—Ç–∫—Ä—ã—Ç–∞: ${shift.openedAt ? new Date(shift.openedAt).toLocaleString('ru-RU') : '‚Äî'}`,
          `–û—Ç–∫—Ä—ã–ª: ${shift.openedBy?.employeeName || '‚Äî'}`,
          `–ó–∞–∫–∞–∑–æ–≤: ${shift.statistics?.ordersCount ?? 0}`,
        ].join('\n');
        await ctx.reply(msg);
      }
      // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
      await ctx.reply('–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    } catch (error) {
      console.error(error);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–º–µ–Ω.', Markup.keyboard([[MENU_BUTTONS.main],]).resize());
    }
  }


  // ====================================================
  // PUBLIC METHODS
  // ====================================================

  async notifySeller(telegramId: number, message: string, options?: {reply_markup?: any}): Promise<TelegramNotificationResponseDto> {
    try {
      await this.bot.telegram.sendMessage(telegramId, message, options);
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü—É ${telegramId}`);
      return {message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', error: error.message};
    }
  }

  async notifySellerAboutShiftUpdate(telegramId: number, shift: Shift, haveOpened: boolean): Promise<TelegramNotificationResponseDto> {
    const prepperedMessage = `${formatShiftMessage(shift, haveOpened)}`;
    
    try {
      await this.notifySeller(telegramId, prepperedMessage);
      return {message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', error: error.message};
    }
  }

  async notifySellerAboutIssueUpdate(telegramId: number, issue: Issue): Promise<TelegramNotificationResponseDto> {
    const prepperedMessage = `${formatIssueMessage(issue)}`;
    
    try {
      await this.notifySeller(telegramId, prepperedMessage);
      return {message: '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü—É ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', error: error.message};
    }
  }

}