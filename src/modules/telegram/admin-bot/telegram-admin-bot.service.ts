import { Injectable, OnModuleInit, BadRequestException } from '@nestjs/common';
import { Telegraf, Markup, Context } from 'telegraf';
import { ConfigService } from '@nestjs/config';
import { Request, Response } from 'express';
import { INestApplication } from '@nestjs/common';
import { setupWebhook } from "../telegram-utils";
import { message } from 'telegraf/filters';
import { AdminAuthService } from 'src/modules/auth/admin-auth/admin-auth.service';
import { AdminSharedService } from 'src/modules/admin/shared/admin.shared.service';
import { ADMIN_BOT_LOGIN_TO_SYSTEM_PREFIX } from 'src/common/constants';
import { TelegramNotificationResponseDto } from 'src/common/dtos';
import { Admin } from 'src/modules/admin/admin.schema';

enum MENU_BUTTONS {
  main = 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
  login = 'üè™ –í–æ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
};

interface AdminContext extends Context {
  state: {
    admin?: Admin | null;
  };
}

@Injectable()
export class TelegramAdminBotService implements OnModuleInit {
  private bot: Telegraf;

  // Map –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  private awaitingAdminLoginCode: Map<number, boolean> = new Map();

  private async clearMaps() {
    this.awaitingAdminLoginCode.clear();
  }
  constructor(
    private readonly configService: ConfigService,
    private readonly adminSharedService: AdminSharedService,
    private readonly adminAuthService: AdminAuthService,
  ) { 
    const token = this.configService.get<string>('ADMIN_BOT_TOKEN');
    if (!token) throw new Error('ADMIN_BOT_TOKEN not provided');
    this.bot = new Telegraf(token);
  }

  async onModuleInit() {
    this.setupBot();
  }



  public async setApp(app: INestApplication) {
    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Telegraf webhook –≤ express NestJS
    app.use('/admin-bot', (req: Request, res: Response, next) => {
      
      if (req.method === 'POST') {
        if (req.body && req.body.update_id) {
          this.bot.handleUpdate(req.body, res);
        } else {
          res.status(400).send('Invalid Telegram update');
        }
      } else {
        res.status(200).send('Customer bot webhook');
      }
    });
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    setupWebhook(this.bot, this.configService, 'Admin', '/admin-bot');
  }

  private setupBot() {
    // –æ–±—â–µ–µ
    this.bot.start(async (ctx) => {
      await this.checkAdminExists(ctx, async (ctx: AdminContext) => {
        await this.handleStart(ctx);
      });
    });

    this.bot.hears(MENU_BUTTONS.main, async (ctx) => {
      await this.checkAdminExists(ctx, async (ctx: AdminContext) => {
        this.clearMaps();
        await this.getMainMenu(ctx);
      });
    });

    // —Ä–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è–º–∏
    this.bot.hears(MENU_BUTTONS.login, async (ctx) => {
      await this.checkAdminExists(ctx, async (ctx: AdminContext) => {
        await this.askLoginCode(ctx);
      });
    });


    // –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    this.bot.on(message('text'), async (ctx) => {
      await this.checkAdminExists(ctx, async (ctx: AdminContext) => {
        const telegramId = ctx.state.admin!.telegramId;
        // —Ä–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π

        if (this.awaitingAdminLoginCode.get(telegramId)) {
          const message = (ctx.message as any).text;
          await this.handleLogin(ctx, message);
          return;
        }
        await ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
      });
    });

  }


  
  // ====================================================
  // PRIVATE METHODS
  // ====================================================

  // –æ–±—â–µ–µ
  private async checkAdminExists(ctx: Context, next: (ctx: AdminContext) => Promise<void>) {
    const telegramId = ctx.from?.id;
    if (!telegramId) return await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
    let admin: Admin | null = null;
    try {
      admin = await this.adminSharedService.getAdminByTelegramId(telegramId);
      if (!admin) return await ctx.reply('–û—à–∏–±–∫–∞: –≤—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.');
    } catch (error) {
      console.error(error);
      return await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.');
    }

    // –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å employee –≤ ctx.state –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    (ctx.state as any).admin = admin;
    await next(ctx as AdminContext);
  };

  private async handleStart(ctx: AdminContext) {
    if (!ctx.message || typeof (ctx.message as any).text !== 'string') return await this.getMainMenu(ctx);
    
    const messageText = (ctx.message as any).text;
    const [command, payload] = messageText.split(' ');

    if (payload) {
      const [action, param] = payload.split('_');
      if (action === ADMIN_BOT_LOGIN_TO_SYSTEM_PREFIX && param) {
        await this.handleLogin(ctx, param);
        return;
      }
      await ctx.reply(`–ü–æ–ª—É—á–µ–Ω –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload: ${payload}`, Markup.keyboard([[MENU_BUTTONS.main]]).resize());
      return;
    }
    
    await this.getMainMenu(ctx);
  }
  private async getMainMenu(ctx: AdminContext) {
    return await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
      Markup.keyboard([[MENU_BUTTONS.login]])
        .resize()
        .oneTime(false)
    );
  }


  // —Ä–∞–±–æ—Ç–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  //// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  private async askLoginCode(ctx: AdminContext) {
    const telegramId = ctx.state.admin!.telegramId;
    this.awaitingAdminLoginCode.set(telegramId, true);
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', {reply_markup: {remove_keyboard: true}});
  }
  private async handleLogin(ctx: AdminContext, code: string) {
    const telegramId = ctx.state.admin!.telegramId;
    try {
      const admin = await this.adminAuthService.confirmLoginCode(telegramId, code);
      //TODO: —Ä–∞–∑–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –ø—Ä–æ–¥–µ
      // await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
      await ctx.reply(admin.token, Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    } catch (err) {
      console.error(err);
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ —É—Å—Ç–∞—Ä–µ–ª', Markup.keyboard([[MENU_BUTTONS.main]]).resize());
    }
    this.clearMaps();
  }


  // —Ä–∞–±–æ—Ç–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  //// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  async notifyAdmin(message: string): Promise<TelegramNotificationResponseDto> {
    const telegramId = this.configService.get<number>('ADMIN_TELEGRAM_ID');
    if (!telegramId) throw new Error('ADMIN_TELEGRAM_ID not provided');
    try {
      await this.bot.telegram.sendMessage(telegramId, message);
      return {message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'};
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${telegramId}:`, error);
      return {message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è', error: error.message};
    }
  }


}
