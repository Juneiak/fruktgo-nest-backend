import { Telegraf } from 'telegraf';
import { ConfigService } from '@nestjs/config';

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook –¥–ª—è Telegram –±–æ—Ç–∞ —Å –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
 * @param bot –≠–∫–∑–µ–º–ø–ª—è—Ä Telegraf –±–æ—Ç–∞
 * @param configService –°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–º–µ–Ω–∞
 * @param botName –ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'Admin', 'Employee')
 * @param path –ü—É—Ç—å –¥–ª—è webhook (–Ω–∞–ø—Ä–∏–º–µ—Ä, '/admin-bot')
 * @param maxRetries –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
 * @param retryInterval –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
 */
export async function setupWebhook(
  bot: Telegraf,
  configService: ConfigService,
  botName: string,
  path: string,
  maxRetries = 5,
  retryInterval = 60000
): Promise<boolean> {
  const webhookUrl = configService.get<string>('WEBHOOK_DOMAIN') || 'http://localhost:3000';
  const fullWebhookUrl = `${webhookUrl}${path}`;
  
  let retries = 0;
  let success = false;
  
  const trySetWebhook = async (): Promise<boolean> => {
    try {
      await bot.telegram.setWebhook(fullWebhookUrl);
      console.log(`ü§ñ ${botName} Telegram bot is running in webhook mode at ${fullWebhookUrl}`);
      return true;
    } catch (error) {
      retries++;
      console.error(`‚ö†Ô∏è Failed to set webhook for ${botName} Telegram bot (attempt ${retries}/${maxRetries}):`, error.message);
      
      if (retries < maxRetries) {
        console.log(`üïí Retrying in ${retryInterval/1000} seconds...`);
        return false;
      } else {
        console.log(`‚ùå Maximum retry attempts (${maxRetries}) reached. ${botName} bot will continue without webhook.`);
        return false;
      }
    }
  };
  
  // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
  success = await trySetWebhook();
  
  // –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
  if (!success && retries < maxRetries) {
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    const retryWithDelay = () => {
      setTimeout(async () => {
        success = await trySetWebhook();
        if (!success && retries < maxRetries) {
          retryWithDelay();
        }
      }, retryInterval);
    };
    
    retryWithDelay();
  }
  
  return success;
}